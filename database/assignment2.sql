-- Create the Type
CREATE TYPE public.account_type AS ENUM
    ('Client', 'Employee', 'Admin');

ALTER TYPE public.account_type
    OWNER TO cse340la;

-- Table structure for table 'classification'
CREATE TABLE public. classification (
	classification_id INT GENERATED BY DEFAULT AS IDENTITY,
	classification_name CHARACTER VARYING NOT NULL,
CONSTRAINT classification_pk PRIMARY KEY (classification_id)
);

-- Table structure for table 'inventory'
CREATE TABLE IF NOT EXISTS public. inventory
(
inv_id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY,
inv_make character varying NOT NULL,
inv_model character varying NOT NULL,
inv_year character(4) NOT NULL,
inv_description text NOT NULL,
inv_image character varying NOT NULL,
inv_thumbnail character varying NOT NULL,
inv_price numeric(9, 0) NOT NULL,
inv_miles integer NOT NULL,
inv_color character varying NOT NULL,
classification_id integer NOT NULL,
CONSTRAINT inventory_pkey PRIMARY KEY (inv_id)
);

-- Create relationship between 'classification' and 'inventory' tables
ALTER TABLE IF EXISTS public. inventory
ADD CONSTRAINT fk_classification FOREIGN KEY (classification_id)
REFERENCES public.classification (classification_id) MATCH SIMPLE
ON UPDATE CASCADE
ON DELETE NO ACTION;

-- Table structure for table `account`
CREATE TABLE IF NOT EXISTS public.account
(
    account_id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    account_firstname character varying NOT NULL,
    account_lastname character varying NOT NULL,
    account_email character varying NOT NULL,
    account_password character varying NOT NULL,
    account_type account_type NOT NULL DEFAULT 'Client'::account_type,
    CONSTRAINT account_pkey PRIMARY KEY (account_id)
);


-- Data for table 'classification'
INSERT INTO public.classification (classification_name)
VALUES ('Custom'),
('Sport'),
('SUV' ) ,
('Truck') ,
('Sedan') ;


-- Assignment 2, Task1
1.-- Insert new record to the account table
INSERT INTO public.account (account_firstname, account_lastname, account_email, account_password)
VALUES ('Tony', 'Stark', 'tony@starkent.com', 'Iam1ronM@n');

2.-- Modify the Tony Stark record to change the account_type to "Admin".
UPDATE public.account
SET account_type = 'Admin'
WHERE account_type = 'Client';

3.-- Delete the Tony Stark record from the database.
DELETE FROM public.account
WHERE account_id = 2;

4.-- Modify the "GM Hummer" record to read "a huge interior" rather than "small interiors" using a single query. Explore the PostgreSQL Replace function Do NOT retype the entire description as part of the query.. It needs to be part of an Update query as shown in the code examples of the SQL Reading - Read Ch. 1, section 3.
UPDATE 
  public.inventory
SET 
  inv_description = REPLACE(inv_description, 'small interiors', 'a huge interior') 
WHERE 
  inv_id = 10;

5.-- Use an inner join to select the make and model fields from the inventory table and the classification name field from the classification table for inventory items that belong to the "Sport" category. These resources may help you: https://www.postgresqltutorial.com/postgresql-tutorial/postgresql-joins/. Two records should be returned as a result of the query.
SELECT
 	inv_make, inv_model
FROM
    public.inventory AS p 
INNER JOIN public.classification AS c
    ON c.classification_id = p.classification_id
WHERE c.classification_id =2;

6.-- Update all records in the inventory table to add "/vehicles" to the middle of the file path in the inv_image and inv_thumbnail columns using a single query. This reference may prove helpful - https://www.postgresqltutorial.com/postgresql-string-functions/postgresql-replace/. When done the path for both inv_image and inv_thumbnail should resemble this example: /images/vehicles/a-car-name.jpg

UPDATE public.inventory
SET 
  inv_image = REPLACE(inv_image, '/images','/images/vehicles'),
  inv_thumbnail = REPLACE(inv_thumbnail, '/images','/images/vehicles');
